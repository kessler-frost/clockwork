{
  "version": "1",
  "artifacts": [
    {
      "path": "scripts/01_fetch_repo.sh",
      "mode": "0755",
      "purpose": "fetch_repo",
      "lang": "bash",
      "content": "#!/bin/bash\nset -e\necho 'Fetching repository...'\nREPO_URL=\"$1\"\nREPO_REF=\"$2\"\ngit clone --branch \"$REPO_REF\" \"$REPO_URL\" .\necho 'Repository fetched successfully'\n",
      "checksum": null
    },
    {
      "path": "scripts/02_build_image.py",
      "mode": "0755",
      "purpose": "build_image",
      "lang": "python",
      "content": "#!/usr/bin/env python3\nimport subprocess\nimport sys\nimport os\n\ndef main():\n    print('Building Docker image...')\n    context = os.environ.get('APP_WORKDIR', '.')\n    tag = os.environ.get('IMAGE_TAG', 'myapp:latest')\n    \n    cmd = ['docker', 'build', '-t', tag, context]\n    print(f'Running: {\" \".join(cmd)}')\n    \n    result = subprocess.run(cmd)\n    if result.returncode == 0:\n        print(f'Image {tag} built successfully')\n    else:\n        print(f'Failed to build image {tag}')\n        \n    sys.exit(result.returncode)\n\nif __name__ == '__main__':\n    main()\n",
      "checksum": null
    },
    {
      "path": "scripts/03_ensure_service.ts",
      "mode": "0644",
      "purpose": "ensure_service",
      "lang": "deno",
      "content": "// Deno TypeScript service management\nimport { serve } from \"https://deno.land/std@0.140.0/http/server.ts\";\n\ninterface ServiceConfig {\n  name: string;\n  image: string;\n  ports: Array<{external: number, internal: number}>;\n  env: Record<string, string>;\n}\n\nasync function ensureService(config: ServiceConfig) {\n  console.log(`Ensuring service: ${config.name}`);\n  console.log(`Image: ${config.image}`);\n  console.log(`Ports: ${JSON.stringify(config.ports)}`);\n  console.log(`Environment: ${JSON.stringify(config.env)}`);\n  \n  // In a real implementation, this would interact with Docker/Kubernetes\n  console.log('Service deployment completed');\n}\n\nif (import.meta.main) {\n  const config: ServiceConfig = {\n    name: Deno.env.get('SERVICE_NAME') || 'myapp',\n    image: Deno.env.get('IMAGE_REF') || 'myapp:latest',\n    ports: [{external: 8080, internal: 8080}],\n    env: {APP_ENV: 'prod'}\n  };\n  \n  await ensureService(config);\n}\n",
      "checksum": null
    },
    {
      "path": "scripts/90_verify_http.go",
      "mode": "0755",
      "purpose": "verify_http",
      "lang": "go",
      "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"os\"\n\t\"strconv\"\n\t\"time\"\n)\n\nfunc main() {\n\turl := os.Getenv(\"VERIFY_URL\")\n\tif url == \"\" {\n\t\turl = \"http://localhost:8080\"\n\t}\n\t\n\texpectedStatusStr := os.Getenv(\"EXPECTED_STATUS\")\n\texpectedStatus := 200\n\tif expectedStatusStr != \"\" {\n\t\tif status, err := strconv.Atoi(expectedStatusStr); err == nil {\n\t\t\texpectedStatus = status\n\t\t}\n\t}\n\t\n\tfmt.Printf(\"Verifying HTTP endpoint: %s\\n\", url)\n\tfmt.Printf(\"Expected status: %d\\n\", expectedStatus)\n\t\n\tclient := &http.Client{Timeout: 10 * time.Second}\n\tresp, err := client.Get(url)\n\tif err != nil {\n\t\tfmt.Printf(\"HTTP request failed: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\tdefer resp.Body.Close()\n\t\n\tif resp.StatusCode == expectedStatus {\n\t\tfmt.Printf(\"\u2713 HTTP verification successful: %d\\n\", resp.StatusCode)\n\t\tos.Exit(0)\n\t} else {\n\t\tfmt.Printf(\"\u2717 HTTP verification failed: expected %d, got %d\\n\", expectedStatus, resp.StatusCode)\n\t\tos.Exit(1)\n\t}\n}\n",
      "checksum": null
    }
  ],
  "steps": [
    {
      "purpose": "fetch_repo",
      "run": {
        "cmd": [
          "bash",
          "scripts/01_fetch_repo.sh"
        ]
      }
    },
    {
      "purpose": "build_image",
      "run": {
        "cmd": [
          "python3",
          "scripts/02_build_image.py"
        ]
      }
    },
    {
      "purpose": "ensure_service",
      "run": {
        "cmd": [
          "deno",
          "run",
          "--allow-all",
          "scripts/03_ensure_service.ts"
        ]
      }
    },
    {
      "purpose": "verify_http",
      "run": {
        "cmd": [
          "go",
          "run",
          "scripts/90_verify_http.go"
        ]
      }
    }
  ],
  "vars": {
    "REPO_URL": "https://github.com/user/myapp",
    "REPO_REF": "main",
    "TAG": "myapp:latest",
    "NAME": "myapp",
    "INTERNAL_PORT": 8080,
    "EXTERNAL_PORT": 8080,
    "URL": "http://localhost:8080"
  }
}