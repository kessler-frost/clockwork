"""
PyInfra Compiler - Template-based conversion of resources to PyInfra code.
"""

import logging
from pathlib import Path
from typing import Any, Dict, List, Optional

from .settings import get_settings

logger = logging.getLogger(__name__)


class PyInfraCompiler:
    """Compiles resources into PyInfra inventory and deploy files."""

    def __init__(self, output_dir: Optional[str] = None):
        """
        Initialize the PyInfra compiler.

        Args:
            output_dir: Directory to write PyInfra files (overrides settings/.env)
        """
        settings = get_settings()
        self.output_dir = Path(output_dir or settings.pyinfra_output_dir)

    def compile(self, resources: List[Any], artifacts: Dict[str, str]) -> Path:
        """
        Compile resources to PyInfra deployment files.

        Args:
            resources: List of Resource objects
            artifacts: Dict of generated artifacts (from AI stage)

        Returns:
            Path to the PyInfra directory
        """
        logger.info(f"Compiling {len(resources)} resources to PyInfra...")

        # Create output directory
        self.output_dir.mkdir(parents=True, exist_ok=True)

        # Generate inventory file
        inventory_path = self.output_dir / "inventory.py"
        inventory_code = self._generate_inventory()
        inventory_path.write_text(inventory_code)
        logger.info(f"Generated inventory: {inventory_path}")

        # Generate deploy file
        deploy_path = self.output_dir / "deploy.py"
        deploy_code = self._generate_deploy(resources, artifacts)
        deploy_path.write_text(deploy_code)
        logger.info(f"Generated deploy: {deploy_path}")

        logger.info(f"PyInfra compilation complete: {self.output_dir}")
        return self.output_dir

    def _generate_inventory(self) -> str:
        """Generate PyInfra inventory file (localhost by default)."""
        return '''"""PyInfra inventory - defines target hosts."""

# Local execution - use @local connector
hosts = ["@local"]
'''

    def _generate_deploy(self, resources: List[Any], artifacts: Dict[str, str]) -> str:
        """
        Generate PyInfra deploy.py file with all operations.

        Args:
            resources: List of Resource objects
            artifacts: Dict of generated artifacts

        Returns:
            Deploy file content as string
        """
        # Header
        deploy_code = '''"""PyInfra deploy - generated by Clockwork."""

from pyinfra.operations import files, server
from io import StringIO

'''

        # Generate operations for each resource
        operations = []
        for resource in resources:
            try:
                op_code = resource.to_pyinfra_operations(artifacts)
                operations.append(op_code)
            except Exception as e:
                logger.error(f"Failed to generate operations for {resource.name}: {e}")
                raise

        # Combine all operations
        deploy_code += "\n".join(operations)

        # Footer
        deploy_code += '''

# End of deployment
'''

        return deploy_code
